//{{{
/**
* jdbc 链接 oracle/mysql 数据库模板工程
* - dbcp 连接池连接 oracle/mysql 数据库的 DbUtils 类, db.properties 文件.
* - 提供 java jdbc 读写 oracle 的 dao 模板.
* - 集成 groovy, 有些功能 java 实现麻烦的话可以考虑用 groovy 处理. 比如文件操作,
* 字符串操作
* 
* To Do:
* - 考虑使用 sfl4j + logback 的日志框架, 并加入工程.
* - 封装 jdbc 操作数据库的方式, 就像 SpringJdbcTemplate 那样.
*
*/
//}}}
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'


/**
* customizing
*/
sourceCompatibility = 1.8
version = '1.0'

// from application
mainClassName = "cn.codergege.main.Main"

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                    'Implementation-Version': version
    }
}

/**
* dependency management
*/
repositories {
    mavenCentral()
}

dependencies {//{{{
    // compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    // compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    // compile group: 'log4j', name: 'log4j', version: '1.2.17'
    // ojdbc6.jar 得从本地导入, maven 中没有好像
    // compile group: 'com.oracle', name: 'ojdbc6', version: '11.1.0.7.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.5'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'

    testCompile 'junit:junit:4.12'
}//}}}

/**
* Tasts
/

//{{{
/**
* task: inits
* 1) 构建 source sets 目录结构, 生成 cn.codergege.domain dao dao.impl, service,
* service.impl, util, main 包结构. 还有 cn.codergege.groovy
* 2) 生成 readme.txt 文件
* 3) 
* todo: 
* 1) 调用 gradle init 任务.
* 2) readme 模板, 时间, author.
*/
//}}}
task inits {//{{{
    def javaBase = 'src/main/java/cn/codergege'
    def groovyBase = 'src/main/groovy/cn/codergege/groovy'
    def javaResources = 'src/main/resources'
    def testBase = 'src/test/java/cn/codergege'
    def testGroovyBase = 'src/test/groovy/cn/codergege/groovy'
    def testResources = 'src/test/resources'
    def srcList = ["$javaBase/domain",
                    "$javaBase/dao", 
                    "$javaBase/dao/impl",
                    "$javaBase/service",
                    "$javaBase/service/impl",
                    "$javaBase/util",
                    "$javaBase/main",
                    "$javaResources",
                    "$testBase/domain",
                    "$testBase/dao", 
                    "$testBase/dao/impl",
                    "$testBase/service",
                    "$testBase/service/impl",
                    "$testBase/util",
                    "$testResources",
                    "$groovyBase",
                    "$testGroovyBase"];

    // 1) 构建 source sets 目录
    doLast {
        srcList.each {
            mkdir(it)
        } 
    }

    // 2) 生成 readme.txt
    doLast {
        new File('readme.txt').write(
"""# README
        
""")
    }

    // 3) 生成 Main
    /*//{{{
    doLast {
        new File("$javaBase/main/Main.java").writ(
"""package cn.codergege.main;

public class Main {

    public static void main(String[] args) {

        System.out.println("Hello!");

    }
}
""")
    }
    *///}}}
                    
}//}}}

/**
* task: prepareDevEnv
* todo:
* 1) copy resources from somedir
*/
task prepareDevEnv {
    doLast {
        println "preparing development environment..."
    }
}

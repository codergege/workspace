<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.codergege.dp.dao.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="cn.codergege.dp.model.Employee" >
    <id column="EMP_ID" property="empId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="GENDER" property="gender" jdbcType="INTEGER" />
    <result column="BIRTHDAY" property="birthday" jdbcType="DATE" />
    <result column="EMAIL" property="email" jdbcType="VARCHAR" />
   <!--  <result column="DEPT_ID" property="deptId" jdbcType="INTEGER" /> -->
   	<association property="department" javaType="cn.codergege.dp.model.Department">
   		<id column="DEPT_ID" property="deptId"/>
   		<result column="DEPT_NAME" property="name"/>
   	</association>
  </resultMap>
  <sql id="Base_Column_List" >
    EMP_ID, name, GENDER, BIRTHDAY, EMAIL, DEPT_ID
  </sql>
  <sql id="ALL_Column_List" >
    e.EMP_ID, e.name, e.GENDER, e.BIRTHDAY, e.EMAIL, d.DEPT_ID, d.NAME AS DEPT_NAME
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="ALL_Column_List" />
    from employee e left outer join department d on e.dept_id = d.dept_id 
    where EMP_ID = #{empId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from employee
    where EMP_ID = #{empId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.codergege.dp.model.Employee" >
    insert into employee (EMP_ID, name, GENDER, 
      BIRTHDAY, EMAIL, DEPT_ID
      )
    values (#{empId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, 
      #{birthday,jdbcType=DATE}, #{email,jdbcType=VARCHAR}, #{department.deptId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.codergege.dp.model.Employee" >
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="empId != null" >
        EMP_ID,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="gender != null" >
        GENDER,
      </if>
      <if test="birthday != null" >
        BIRTHDAY,
      </if>
      <if test="email != null" >
        EMAIL,
      </if>
      <if test="department.deptId != null" >
        DEPT_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="empId != null" >
        #{empId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=DATE},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="department.deptId != null" >
        #{department.deptId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.codergege.dp.model.Employee" >
    update employee
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        GENDER = #{gender,jdbcType=INTEGER},
      </if>
      <if test="birthday != null" >
        BIRTHDAY = #{birthday,jdbcType=DATE},
      </if>
      <if test="email != null" >
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="department.deptId != null" >
        DEPT_ID = #{department.deptId,jdbcType=INTEGER},
      </if>
    </set>
    where EMP_ID = #{empId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.codergege.dp.model.Employee" >
    update employee
    set name = #{name,jdbcType=VARCHAR},
      GENDER = #{gender,jdbcType=INTEGER},
      BIRTHDAY = #{birthday,jdbcType=DATE},
      EMAIL = #{email,jdbcType=VARCHAR},
      DEPT_ID = #{department.deptId,jdbcType=INTEGER}
    where EMP_ID = #{empId,jdbcType=INTEGER}
  </update>
  <select id="getAll" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="ALL_Column_List" />
    from employee e left outer join department d on e.dept_id = d.dept_id 
  </select>
</mapper>